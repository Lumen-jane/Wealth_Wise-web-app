name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' 

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  static-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install ESLint
        run: npm install eslint --save-dev

      - name: Run static code analysis
        run: npx eslint .

  build:
    runs-on: ubuntu-latest
    needs: [unit-test, static-code-analysis]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/app:${{ github.sha }} .

  scan-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://aquasecurity.github.io/trivy/install.sh | sh

      - name: Scan Docker image
        run: |
          trivy image --exit-code 1 ghcr.io/${{ github.repository }}/app:${{ github.sha }}

  push-image:
    runs-on: ubuntu-latest
    needs: scan-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag ghcr.io/${{ github.repository }}/app:${{ github.sha }} ghcr.io/${{ github.repository }}/app:latest
          docker push ghcr.io/${{ github.repository }}/app:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/app:latest

  update-k8s:
    runs-on: ubuntu-latest
    needs: push-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change this to your AWS region

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.AWS_EKS_CLUSTER }}

      - name: Update Kubernetes deployment
        run: |
          kubectl set image deployment/my-deployment my-container=ghcr.io/${{ github.repository }}/app:${{ github.sha }}
